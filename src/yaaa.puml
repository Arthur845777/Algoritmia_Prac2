@startuml
left to right direction
actor Cliente
actor Cajero

rectangle "Sistema de Cajero Bancario" {
    usecase "Validar identidad del cliente" as UC1
    usecase "Realizar depósito" as UC2
    usecase "Realizar retiro" as UC3
    usecase "Consultar saldo" as UC4
    usecase "Realizar transferencia" as UC5
    usecase "Imprimir comprobante" as UC6
    usecase "Registrar operación en sistema" as UC7
    usecase "Ver historial de cliente" as UC8
}

Cliente --> Cajero : Solicita operación
Cajero --> UC1
Cajero --> UC2
Cajero --> UC3
Cajero --> UC4
Cajero --> UC5
Cajero --> UC6
UC2 --> UC7
UC3 --> UC7
UC4 --> UC7
UC5 --> UC7
UC7 --> UC6
Cajero --> UC8

@enduml



@startuml
left to right direction
skinparam usecaseArrowColor #0066CC
skinparam usecaseBorderColor #0066CC
skinparam usecaseBackgroundColor #EEEEEE

actor "Usuario" as usuario
actor "Ejecutivo Bancario" as ejecutivo

rectangle "Sistema de Ventanilla Bancaria" {
    usecase "Validar identidad del usuario" as UC1
    usecase "Realizar depósito" as UC2
    usecase "Realizar retiro" as UC3
    usecase "Consultar saldo" as UC4
    usecase "Realizar transferencia" as UC5
    usecase "Imprimir comprobante" as UC6
    usecase "Pagar servicios" as UC7
    usecase "Gestionar cheques" as UC8
}

' Relaciones principales
usuario --> ejecutivo : Solicita operación
usuario --> UC1 : Proporciona identificación

' Relaciones del ejecutivo bancario
ejecutivo --> UC1 : Verifica
ejecutivo --> UC2 : Procesa
ejecutivo --> UC3 : Procesa
ejecutivo --> UC4 : Consulta
ejecutivo --> UC5 : Procesa
ejecutivo --> UC6 : Genera
ejecutivo --> UC7 : Procesa
ejecutivo --> UC8 : Gestiona

' Relaciones simples entre casos de uso
UC2 ..> UC6 : incluye
UC3 ..> UC6 : incluye
UC4 ..> UC6 : incluye
UC5 ..> UC6 : incluye
UC7 ..> UC6 : incluye
UC8 ..> UC6 : incluye
@enduml


@startuml
skinparam sequenceArrowColor #0066CC
skinparam sequenceLifeLineBorderColor #0066CC
skinparam sequenceParticipantBorderColor #0066CC
skinparam sequenceParticipantBackgroundColor #EEEEEE

actor Cliente
actor Cajero
participant "Sistema Ventanilla" as SV
participant "Sistema Central" as SC
database "Base de Datos" as BD

Cliente -> Cajero: Solicita operación bancaria
Cajero -> Cliente: Solicita identificación
Cliente -> Cajero: Proporciona identificación
Cajero -> SV: Inicia sesión en sistema

group Validación de Identidad
    Cajero -> SV: Ingresa datos de identificación
    SV -> SC: Valida identidad
    SC -> BD: Consulta datos cliente
    BD -> SC: Devuelve información
    SC -> SV: Confirma identidad
end

group Transacción Bancaria
    alt Depósito
        Cliente -> Cajero: Entrega dinero + datos
        Cajero -> SV: Registra depósito
        SV -> SC: Valida y procesa depósito
        SC -> BD: Actualiza cuenta
        BD -> SC: Confirma actualización
    else Retiro
        Cliente -> Cajero: Solicita retiro + datos
        Cajero -> SV: Registra solicitud retiro
        SV -> SC: Verifica saldo y límites
        SC -> BD: Consulta cuenta
        BD -> SC: Devuelve información
        SC -> SV: Autoriza retiro
        Cajero -> Cliente: Entrega dinero
    else Transferencia
        Cliente -> Cajero: Solicita transferencia + datos
        Cajero -> SV: Registra datos transferencia
        SV -> SC: Verifica cuentas y límites
        SC -> BD: Consulta cuentas
        BD -> SC: Devuelve información
        SC -> SV: Autoriza transferencia
        SC -> BD: Actualiza cuentas
        BD -> SC: Confirma actualización
    end
end

SV -> SC: Registra operación completada
SC -> BD: Almacena registro de transacción
BD -> SC: Confirma registro
SC -> SV: Confirma registro completo
SV -> Cajero: Solicita impresión de comprobante
Cajero -> SV: Confirma impresión
SV -> Cajero: Imprime comprobante
Cajero -> Cliente: Entrega comprobante

@enduml


@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor #EEEEEE
skinparam classBorderColor #0066CC

class Cliente {
  -clienteID: String
  -nombre: String
  -apellido: String
  -documentoIdentidad: String
  -direccion: String
  -telefono: String
  -email: String
  +validarIdentidad(): boolean
  +actualizarDatos(): void
}

class Cuenta {
  -cuentaID: String
  -clienteID: String
  -tipoCuenta: TipoCuenta
  -saldo: double
  -moneda: String
  -fechaApertura: Date
  -estado: EstadoCuenta
  +getSaldo(): double
  +actualizarSaldo(monto: double): boolean
  +verificarLimites(monto: double): boolean
  +getHistorialTransacciones(): List<Transaccion>
}

class Transaccion {
  -transaccionID: String
  -cuentaOrigen: String
  -cuentaDestino: String
  -tipo: TipoTransaccion
  -monto: double
  -fecha: DateTime
  -estado: EstadoTransaccion
  -cajeroID: String
  -referencia: String
  +registrarTransaccion(): boolean
  +generarComprobante(): Comprobante
}

class Cajero {
  -empleadoID: String
  -nombre: String
  -apellido: String
  -rol: String
  -terminal: String
  +validarCliente(cliente: Cliente): boolean
  +realizarDeposito(cuenta: Cuenta, monto: double): Transaccion
  +realizarRetiro(cuenta: Cuenta, monto: double): Transaccion
  +realizarTransferencia(origen: Cuenta, destino: Cuenta, monto: double): Transaccion
  +imprimirComprobante(transaccion: Transaccion): void
  +consultarSaldo(cuenta: Cuenta): double
  +verHistorialCliente(cliente: Cliente): List<Transaccion>
  +actualizarDatosCliente(cliente: Cliente): boolean
  +pagarServicio(cuenta: Cuenta, servicio: Servicio, monto: double): Transaccion
}

class Servicio {
  -servicioID: String
  -nombreServicio: String
  -proveedor: String
  -comision: double
  +procesarPago(cuenta: Cuenta, monto: double): Transaccion
}

class Comprobante {
  -comprobanteID: String
  -transaccionID: String
  -fechaEmision: DateTime
  -detalles: String
  +imprimir(): void
}

class CambioDivisa {
  -monedaOrigen: String
  -monedaDestino: String
  -tasaCambio: double
  -fecha: Date
  +calcularCambio(monto: double): double
  +registrarCambio(cliente: Cliente, monto: double): Transaccion
}

class Cheque {
  -chequeID: String
  -cuentaID: String
  -monto: double
  -beneficiario: String
  -fechaEmision: Date
  -estado: EstadoCheque
  +validarCheque(): boolean
  +cobrarCheque(cuenta: Cuenta): Transaccion
  +depositarCheque(cuenta: Cuenta): Transaccion
}

enum TipoCuenta {
  AHORRO
  CORRIENTE
  PLAZO_FIJO
  NOMINA
  EMPRESARIAL
}

enum TipoTransaccion {
  DEPOSITO
  RETIRO
  TRANSFERENCIA
  PAGO_SERVICIO
  CAMBIO_DIVISA
  COBRO_CHEQUE
}

enum EstadoTransaccion {
  PENDIENTE
  COMPLETADA
  RECHAZADA
  CANCELADA
}

enum EstadoCuenta {
  ACTIVA
  BLOQUEADA
  INACTIVA
  CERRADA
}

enum EstadoCheque {
  EMITIDO
  COBRADO
  ANULADO
  RECHAZADO
}

Cliente "1" -- "0..*" Cuenta : posee >
Cuenta "1" -- "0..*" Transaccion : registra >
Cajero "1" -- "0..*" Transaccion : realiza >
Transaccion "1" -- "0..1" Comprobante : genera >
Transaccion <|-- CambioDivisa
Transaccion <|-- Cheque
Servicio "1" -- "0..*" Transaccion : asociado a >
@enduml